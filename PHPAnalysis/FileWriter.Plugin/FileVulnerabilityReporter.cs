using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.IO;
using System.Linq;
using FileWriter.Plugin;
using PHPAnalysis.Analysis;
using PHPAnalysis.Analysis.PHPDefinitions;

namespace WordPress.Plugin
{
    [Export(typeof(IVulnerabilityReporter))]
    [Export(typeof(IAnalysisStartingListener))]
    [Export(typeof(IAnalysisEndedListener))]
    public sealed class FileVulnerabilityReporter : IVulnerabilityReporter, IAnalysisStartingListener, IAnalysisEndedListener
    {
        private readonly string _vulnerabilityFile;
        private int _vulnCounter = 1;
        private readonly string _stackSeperator = Environment.NewLine + " → ";
        private FunctionsHandler _funcHandler;

        private readonly DbFileWriter _dbFileWriter;
        public FileVulnerabilityReporter()
        {
            _dbFileWriter = new DbFileWriter();
            _vulnerabilityFile = "scan-report." + DateTimeOffset.Now.ToString("yyMMddHmmss") + ".txt";
        }
        public void AnalysisStarting(object o, AnalysisStartingEventArgs e)
        {
            WriteInfoLine("              -----------------------------              ");
            WriteInfoLine("=============              Eir              =============");
            WriteInfoLine("============= Vulnerability Scanning Report =============");
            WriteInfoLine("              -----------------------------              ");
            WriteInfoLine("Target                  : " + e.Arguments.Target);
            WriteInfoLine("Scanning all subroutines: " + (e.Arguments.ScanAllSubroutines ? "Yes" : "No"));
            WriteInfoLine("Scan started            : " + DateTimeOffset.Now);
            WriteInfoLine("---------------------------------------------------------");
            _dbFileWriter.WriteStart(e.Arguments.Target);
        }

        public void AnalysisEnding(object o, AnalysisEndedEventArgs e)
        {
            WriteInfoLine("---------------------------------------------------------");
            WriteInfoLine("Time spent: " + e.TimeElapsed);
            WriteInfoLine("---------------------------------------------------------");
            _dbFileWriter.WriteEnd(e.TimeElapsed);
        }

        public void ReportVulnerability(IVulnerabilityInfo vulnerabilityInfo)
        {
            WriteBeginVulnerability();
            WriteInfoLine("Message: " + vulnerabilityInfo.Message);
            WriteInfoLine("Include stack: " + String.Join(_stackSeperator, vulnerabilityInfo.IncludeStack.Select(f => f.FullPath)));
            WriteInfo("Call stack: " + String.Join(_stackSeperator, vulnerabilityInfo.CallStack.Select(c => c.Name)));
            WriteFilePath(vulnerabilityInfo);
            WriteEndVulnerability();
            _dbFileWriter.WriteVulnerability(vulnerabilityInfo);
        }

        public void ReportStoredVulnerability(IVulnerabilityInfo[] vulnerabilityPathInfos)
        {
            WriteBeginVulnerability();

            foreach (var pathInfo in vulnerabilityPathInfos)
            {
                WriteInfoLine(">> Taint Path: ");
                WriteInfoLine(pathInfo.Message);
                WriteInfoLine(String.Join(_stackSeperator, pathInfo.IncludeStack));
                WriteInfoLine("Callstack: " + String.Join(_stackSeperator, pathInfo.CallStack.Select(c => c.Name)));
                WriteFilePath(pathInfo);
            }

            WriteEndVulnerability();
            _dbFileWriter.WriteStoredVulnerability(vulnerabilityPathInfos);
        }

        public void RegisterFunctionsHandler(FunctionsHandler functionsHandler)
        {
            _funcHandler = functionsHandler;
            _dbFileWriter.RegisterFunctionsHandler(functionsHandler);
        }

        private void WriteBeginVulnerability()
        {
            File.AppendAllLines(_vulnerabilityFile, new[] { "|> " + _vulnCounter++ });
        }
        private void WriteInfo(string info)
        {
            File.AppendAllText(_vulnerabilityFile, info);
        }

        private void WriteFilePath(IVulnerabilityInfo vulnInfo)
        {
            var funcList = vulnInfo.CallStack.Any() ? _funcHandler.LookupFunction(vulnInfo.CallStack.Peek().Name) : null;
            if (funcList == null || !funcList.Any())
            {
                return;
            }
            if (funcList.Count == 1)
            {
                var str = "Function/method: " + funcList.First().Name +
                          (string.IsNullOrWhiteSpace(funcList.First().File) ? "" : Environment.NewLine + "In file: " + funcList.First().File);
                WriteInfo(str);
            }
            else
            {
                WriteInfo("Function/method: " + funcList.First().Name + Environment.NewLine
                          + "File candidates: " + Environment.NewLine
                          + string.Join(Environment.NewLine, funcList.Select(x => x.File)));
            }
        }

        private void WriteInfoLine(string info)
        {
            WriteInfo(info);
            WriteInfo(Environment.NewLine);
        }
        private void WriteEndVulnerability()
        {
            File.AppendAllLines(_vulnerabilityFile, new[] { "", "<|" });
        }
    }
}
